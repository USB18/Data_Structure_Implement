package Singly_Deletion;

class Node {
	int data;
	Node next;

	Node(int data) {
		this.data = data;
		this.next = null;
	}
}

public class Deletion {
	Node head;

	public void Insert(int data) { // Insertion from Begining
		Node node = new Node(data);
		if (head == null) {
			head = node;
		} else {
			node.next = head;
			head = node;
		}
	}

	public void DeleteAtBegin() { // Deletion At Begin
		if (head == null) {
			System.out.println("No node");
		} else {
			head = head.next;
		}
	}

	public void DeleteAtEnd() { // Deletion At Ending
		if (head == null) {
			System.out.println("No node");
		} else {
			Node current = head;
			while (current.next.next != null) {
				current = current.next;
			}
			current.next = null;
		}
	}

	public void DeleteAtAny(int position) { // Deletion At Any Position
		if (position < 1) {
			System.out.println("Error");
		}
		if (position == 1) {
			Node temp = head;
			head = head.next;
			temp = null;
		} else {
			Node current = head;
			int count = 1;
			while (count < (position - 1)) {
				current = current.next;
				count++;
			}
			Node temp = current.next;
			current.next = temp.next;
			temp.next = null;
		}
	}

	public void show() { // Printing and Traversing
		Node n = head;
		while (n != null) {
			System.out.println(n.data);
			n = n.next;
		}
	}

	public static void main(String[] args) {
		Deletion list = new Deletion();
		System.out.println("Before deletion");
		list.Insert(5);
		list.Insert(15);
		list.Insert(10);
		list.Insert(20);
		list.Insert(25);
		list.Inser(12);
		list.show();
		
		System.out.println("After Deletion from Begin");		
		list.DeleteAtBegin();
		list.show();
		
		System.out.println("After Deletion from End");
		list.DeleteAtEnd();
		list.show();
		
		System.out.println("After Deletion at any position");
		list.DeleteAtAny(4);
		list.show();
	}
}
